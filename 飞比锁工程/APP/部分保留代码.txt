/***
**门锁协议解析
**/
u8 lock_protocal_analysis(u8 command,BFCT_protocol *BFCT_protocol_Lock)
{
    u8 i=0;
    static u32 cmd_id=1;
    static u16 delay=0;
    static u8 first_frame=0;

    if(BFCT_protocol_Lock->send_fail==1)
    {
      zigbee_moni_state =0;
      BFCT_protocol_Lock->send_fail =0;
    }
    
  if(command==LOCK_OPENNET)
  { 
     
      switch(lock_moni_state)
      {
      case 0:
            zigbee_protocal_component(&BFCT_protocol_Zigbee,0X01,ZIGBEE_CMD_OPENNET,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0 
            lock_moni_state++;
            delay=0;
        break;
      case 1:
          if(Zigbee_process_done)
          {
             lock_moni_state=0;
             return 1;
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=0;
              return 1;
           }
         }
         break;
      case 2:
        break;
      default:
        break;
      }
  }
  else if(command==LOCK_CLOSENET)  //开锁回复
  {
      switch(lock_moni_state)
      {
      case 0:
            zigbee_protocal_component(&BFCT_protocol_Zigbee,0X01,ZIGBEE_CMD_CLOSENET,data_buff);
            lock_moni_state++;
            delay=0;
        break;
      case 1:
          if(Zigbee_process_done)
          {
             lock_moni_state=0;
              return 1;
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=0;
             return 1;
           }
         }
         break;
      case 2:
        break;
      default:
        break;
      }
  }
  else if(command==ACK_LOCK_OPENLOCK)  //开锁回复
  {
    /******
    if(BFCT_protocol_Lock.receive_data[LOCK_CMD_ADDR+1] == 0x00) { 
       data_buff[0] = 0x00;  //用户属性
       data_buff[1] = 0x00;  //用户编号
       data_buff[2] = 0x01;  // 开锁方式
       data_buff[3] = 0x00;  //  密码编号 
       zigbee_protocal_component(&BFCT_protocol_Zigbee,0x05,ACK_ZIGBEE_CMD_UPLOAD,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0   
    }
    else
    {
       zigbee_protocal_component(&BFCT_protocol_Zigbee,0x01,0x0D,data_buff); //远程开锁失败 
    }
    ********/
     return 1;
  }
   else if(command==LOCK_OPENLOCK_BYFORCE)
  {
    zigbee_protocal_component(&BFCT_protocol_Zigbee,10,ZIGBEE_CMD_OPENLOCK_BYFORCE,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0  
    return 1;
  } 
   else if(command==LOCK_STATE_UPDATA){  /*  上传数据 */

       data_buff[0] = BFCT_protocol_Lock->receive_data[8];  //用户属性
       data_buff[1] = BFCT_protocol_Lock->receive_data[8];  //用户编号
       data_buff[2] = BFCT_protocol_Lock->receive_data[9];  // 开锁方式
       data_buff[3] = BFCT_protocol_Lock->receive_data[9];  //  密码编号 
       
       zigbee_protocal_component(&BFCT_protocol_Zigbee,0x01,ACK_ZIGBEE_CMD_LOW_POWER,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0  
       return 1;
   }
   else if(command==LOCK_LOGIN_SAFE_MODE)
   {
                                 /****    if( 1== aquice_data_fromlock_cmd(0x09)){  ********/
      return 1;
   }
   else if(command==0x89)
   {
     
   } 
   else if(command==LOCK_ADD_USER_FROM_WIRELESS)
   {  
      return 1;
   }
   else if(command==LOCK_LOGOUT_SETTING_MODE)
   {  
       return 1;
   }
   else if(command==LOCK_ADD_USER)
   {  
      switch(lock_moni_state)
      {
      case 0:
          data_buff[0]=0X01;
          data_buff[1]=0X01;
          zigbee_protocal_component(&BFCT_protocol_Zigbee,0X03,ZIGBEE_CMD_ADDUSER_FROM_LOCK,data_buff); //
          continue_usart_data =1;  /*  续传标志位*/
          lock_moni_state++;
          Zigbee_process_done =0; //使用全局变量
          delay =0;
        break;
      case 1:
          if(Zigbee_process_done)
          {
             data_buff[0] =0x01;  //用户属性
             data_buff[1] = 0x01;  //用户编号
             data_buff[2] = 0x01;  // 开锁方式
             data_buff[3] = 0x01;  //  密码编号 
             zigbee_protocal_component(&BFCT_protocol_Zigbee,0X0b,35,data_buff); // 
             lock_moni_state++;
             Zigbee_process_done =0; //使用全局变量
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=1;
             return 1;
           }
         }
        break;
      case 2:
          if(Zigbee_process_done)
          {
             lock_moni_state=0;
             return 1;
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=0;
             return 1;
           }
         }
        break;
        
      case 3:
        break;
        
      default:
        break;
      }
   }
   else if(command==LOCK_LOCK_BE_OPENED)
   {  
      switch(lock_moni_state)
      {
      case 0:
          EEPROM_multbyte_write(battery_percent_addr,&(BFCT_protocol_Lock->receive_data[4]),2);
          data_buff[0] =0x01;// BFCT_protocol_Lock.receive_data[8];  //用户属性
          data_buff[1] = BFCT_protocol_Lock->receive_data[8];  //用户编号
          data_buff[2] =0x03;  // 开锁方式
          data_buff[3] = BFCT_protocol_Lock->receive_data[9];  //  密码编号 
          zigbee_protocal_component(&BFCT_protocol_Zigbee,0x05,ACK_ZIGBEE_CMD_UPLOAD,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0 
          lock_moni_state++;
          Zigbee_process_done =0; //使用全局变量
          delay =0;
        break;
      case 1:
          if(Zigbee_process_done)
          {
             data_buff[0] = BFCT_protocol_Lock->receive_data[8];  //用户属性
             data_buff[1] = BFCT_protocol_Lock->receive_data[8];  //用户编号
             data_buff[2] = BFCT_protocol_Lock->receive_data[9];  // 开锁方式
             data_buff[3] = BFCT_protocol_Lock->receive_data[9];  //  密码编号 
             
             zigbee_protocal_component(&BFCT_protocol_Zigbee,0x01,ACK_ZIGBEE_CMD_LOW_POWER,data_buff); //data_buff = 0 0 0 0 0 0 0 0 0 0 0 0  
             lock_moni_state++;
             Zigbee_process_done =0; //使用全局变量
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=0;
           }
         }
        break;
      case 2:
          if(Zigbee_process_done)
          {
             lock_moni_state=0;
             return 1;
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){
             lock_moni_state=0;
             delay=0;
             return 1;
           }
         }
        break;
        
      case 3:
          if(Zigbee_process_done)
          {
            
          }
         if(t_1ms)
         {
           delay++;
           if(delay > 300){

             return 1;
           }
         }
        break;
        
      default:
        break;
      }
   }
   else
   {
      lock_state = 10;;
      Lock_process_done = 1;
      Zigbee_process_done =1;
      return 1;
   }
  
  return 0;
}



/**********
**函数描述 ： **模块协议解析
**********/
u8 zigbee_protocal_analysis(BFCT_protocol * BFCT_protocol_Lock)
{
    u8 i=0;
    static u32 cmd_id=1;
    u8 data_buff[50];
    static u16 delay=0;
    static u8 zigbee_moni_state;
    

      
   if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_ACK)
   {
     return 1;
   }
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_OPENNET_SUCEESS)
  {   
    switch(zigbee_moni_state)
      {
         case 0:
          reply_ACK(&BFCT_protocol_Zigbee);
          zigbee_moni_state++;
          delay =0;
          break;
         case 1:
           if(BFCT_protocol_Zigbee.send_len ==0) //等待发送完成
           {
               return 1;
               zigbee_moni_state =0;
           }
           if(t_1ms)
           {
             delay++;
             if(delay > 300){
               zigbee_moni_state=0;
               delay=0;
               return 1;
             }
           }
           break;
         default:
          break;
      }
  }
  else if(BFCT_protocol_Zigbee.receive_data[1]==ZIGBEE_CMD_ADD_USER) 
  {

  }
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_OPENLOCK) //开锁命令
  {
    switch(zigbee_moni_state)
      {
         case 0:
            zigbee_moni_state++;
            lock_protocal_component(1,LOCK_OPENLOCK,data_buff);
            delay=0;
            BFCT_protocol_Lock->receive_enable=0;
          break; 
       case 2:
           if( BFCT_protocol_Lock->send_len ==0) //等待发送完成
           {
              Lock_process_done =1;
              BFCT_protocol_Lock->receive_enable=1;
              return 1;
           }
           if(t_1ms)
           {
             delay++;
             if(delay > 900){
               zigbee_moni_state=0;
               delay=0;
               BFCT_protocol_Lock->receive_enable=1;
               return 1;
             }
           } 
          if(BFCT_protocol_Lock->send_fail==1)
          {
            zigbee_moni_state =0;
            BFCT_protocol_Lock->send_fail =0;
             BFCT_protocol_Lock->receive_enable=1;
            return 1;
          }
        break;
          
         default:
           zigbee_moni_state =0;
           return 1;
         break;
      }
  }
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ACK_ZIGBEE_CMD_OPENLOCK) //开锁命令
  {
      //暂且不做任何处理
    return 1;
  }
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_OPENLOCK_BYFORCE) //强制开锁
  {
      lock_protocal_component_ACK(ACK_OPENLOCK_BYFORCE,SUCCESS);    //强制开锁回复命令
      return 1;
  } 
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ACK_ZIGBEE_CMD_LOCAL_OPEN_LOCK) //收到zigbee模块，本地开锁的回复
  {
    lock_protocal_component_ACK(ACK_ZIGBEE_CMD_LOCAL_OPEN_LOCK,SUCCESS);    //强制开锁回复命令
    return 1;
  }
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_CLOCK_SYNC) //时间同步协议
  {    
    return 1;
  } 
  else if(BFCT_protocol_Zigbee.receive_data[ZIGBEE_CMD_ADDR]==ZIGBEE_CMD_INQURE_INFO) //时间同步协议
  {
    return 1;
  } 
  else
  {
    Lock_process_done = 1; //因为不需要锁回复，标记 接收锁 通讯成功,直接进入睡眠模式
    return 1;
  }
  return 0;
}












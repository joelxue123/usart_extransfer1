u8 UsartCmd(void)
{
	u16 T100us;
	u16 DataLen;
	
	if(GpioRead(RXD_PORT, RXD_PIN))//说明模块有数据要发
	{
		//如果程序下载不关，也不可以通过外部的usart口来开锁，因为蓝牙的串口会把ＲＸＤ脚
		//一直拉高，但是如果蓝牙模块不在了就可以了。
		#ifdef EX_USART_EN_PIN
		ExUsartDisable();
		#endif 
		
		UsartInitRx();
		GpioOutPpHighFast(TXD_PORT, TXD_PIN);//通知模块可以发数据了
		for(T100us=0;T100us<20000;T100us++)
		{
			DlyUs(50);
			if(!GpioRead(RXD_PORT, RXD_PIN))
			{
				GpioLow(TXD_PORT, TXD_PIN);
			}
			if(UsartFlag==OK)
			{
				GpioLow(TXD_PORT, TXD_PIN);
				UsartDisable();
				UsartFlag=NOOK;

				if(UsartBuff[UART_HEAD_ADDR]!=0X02)//长宇要求，他们收完数据后，ＴＸ还保持一段时间高电平
				{
					#ifdef EX_USART_EN_PIN
					ExUsartEnble();
					#endif 
					return OK;
				}
				
				DataLen=UsartBuff[1]+((u16)UsartBuff[2]<<8);
				//校验数据
				if(UsartBuff[DataLen+3]!=crc_8n(UsartBuff, DataLen+3))
				{
					UsartBuff[UART_CMD_ADDR]=CMD_CRC_ERRO;
					UsartSend(1);
					#ifdef EX_USART_EN_PIN
					ExUsartEnble();
					#endif 
					return OK;
				}
				else
				{
					UsartEnable=OK;//收到过正确的数据后，说明模块在
				}

				if(UsartBuff[UART_LEN_ADDR]!=DataLen)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_LEN_ERRO;
					UsartSend(1);
					#ifdef EX_USART_EN_PIN
					ExUsartEnble();
					#endif 
					return OK;
				}
				
				if(UsartBuff[UART_CMD_ADDR]==CMD_ADD_USER)
				{
					UsartAddUser(UsartBuff);
				}

				else if((UsartBuff[UART_CMD_ADDR]==CMD_DEL_USER_BY_NB)||
				(UsartBuff[UART_CMD_ADDR]==CMD_FREEZE_USER_BY_NB)||
				(UsartBuff[UART_CMD_ADDR]==CMD_UNFREEZE_USER_BY_NB))
				{
					DelFreezeUserByNbName(UsartBuff[UART_CMD_ADDR],UsartBuff[DEL_FREEZE_NB_ADDR]+((u16)UsartBuff[DEL_FREEZE_NB_ADDR+1]<<8),
					(u8*)0,UsartBuff[DEL_FREEZE_BY_NB_TYPE_ADDR],1);
				}
				
				else if((UsartBuff[UART_CMD_ADDR]==CMD_DEL_USER_BY_NAME)||
				(UsartBuff[UART_CMD_ADDR]==CMD_FREEZE_USER_BY_NAME)||
				(UsartBuff[UART_CMD_ADDR]==CMD_UNFREEZE_USER_BY_NAME))
				{
					DelFreezeUserByNbName(UsartBuff[UART_CMD_ADDR],0,
					UsartBuff+DEL_FREEZE_USER_NAME_ADDR,UsartBuff[DEL_FREEZE_BY_NAME_TYPE_ADDR],1);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_DEL_USER_IN_LOCK)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_DEL_USER_IN_LOCK_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
					DelUser();
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_READ_USER_INFOR)
				{
					SendUserData(UsartBuff[READ_USER_STAT_ADDR_ADDR]+((u16)UsartBuff[READ_USER_STAT_ADDR_ADDR+1]<<8), 
					UsartBuff[READ_USER_N_ADDR]);//注意一帧数据不能超过UsartBuff的大小
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_READ_RECORD)
				{
					ReadRecord(UsartBuff[READ_RECORD_STAT_ADDR_ADDR]+((u16)UsartBuff[READ_RECORD_STAT_ADDR_ADDR+1]<<8), 
					UsartBuff[READ_USER_N_ADDR]);//注意一帧数据不能超过UsartBuff的大小
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_CLR_USER)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_CLR_USER_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
					ClearAllUser();
					Display(0, DP_CLEAR_SUCCESS,CLEAR);
					PlaySound(SD_CLEAR_SUCCESS);
					WaitSound();
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_TIME)
				{
					SetTime(UsartBuff+UART_DATA_ADDR);
					UsartBuff[UART_CMD_ADDR]=CMD_SET_TIME_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_UNLOCK)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_UNLOCK_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
					Door(0xffff);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_LOCK)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_LOCK_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
					LockUnlock(LOCK);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_ALARM)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_ALARM_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
					Alarm();
				}
				
				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_UNLOCK_PREMI)
				{
					EepromWriteAByte(UNLOCK_PERMI_ST_ADDR,UsartBuff[UART_DATA_ADDR]);
					UsartBuff[UART_CMD_ADDR]=CMD_SET_UNLOCK_PREMI_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_VOLUME)
				{
					EepromWriteAByte(QUIET_ST_ADDR,UsartBuff[UART_DATA_ADDR]);
					UsartBuff[UART_CMD_ADDR]=CMD_SET_VOLUME_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_UNLOCK_KEEP_TIME)
				{
					EepromWriteAByte(UNLOCK_KEEP_TIME_ST_ADDR,UsartBuff[UART_DATA_ADDR]);
								
					UsartBuff[UART_CMD_ADDR]=CMD_SET_UNLOCK_KEEP_TIME_ACK;
					#ifdef MAN_RX_PIN
					UsartBuff[UART_DATA_ADDR]=SetParaToSub();
					#else
					UsartBuff[UART_DATA_ADDR]=OK;
					#endif
					UsartSend(2);
				}
				
				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_LOCK_MODE)
				{
					EepromWriteAByte(AUTO_LOCK_ST_ADDR,UsartBuff[UART_DATA_ADDR]);
					UsartBuff[UART_CMD_ADDR]=CMD_SET_LOCK_MODE_ACK;
					#ifdef MAN_RX_PIN
					UsartBuff[UART_DATA_ADDR]=SetParaToSub();
					#else
					UsartBuff[UART_DATA_ADDR]=OK;
					#endif
					UsartSend(2);
				}
				
				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_UNLOCK_DIR)
				{
					EepromWriteAByte(UNLOCK_DIR_ST_ADDR,UsartBuff[UART_DATA_ADDR]);

					UsartBuff[UART_CMD_ADDR]=CMD_SET_UNLOCK_DIR_ACK;
					#ifdef MAN_RX_PIN
					UsartBuff[UART_DATA_ADDR]=SetParaToSub();
					#else
					UsartBuff[UART_DATA_ADDR]=OK;
					#endif
					UsartSend(2);
				}
				
				else if(UsartBuff[UART_CMD_ADDR]==CMD_SET_LANGUAGE)
				{
					EepromWriteAByte(LANGUAGE_ST_ADDR,UsartBuff[UART_DATA_ADDR]);
					UsartBuff[UART_CMD_ADDR]=CMD_SET_LANGUAGE_ACK;
					UsartBuff[UART_DATA_ADDR]=OK;
					UsartSend(2);
				}

				else if(UsartBuff[UART_CMD_ADDR]==CMD_READ_DOOR_INFOR)
				{
					UsartBuff[UART_CMD_ADDR]=CMD_READ_DOOR_INFOR_ACK;
					EepromReadNByte(INT_DATA_ST_ADDR, UsartBuff+UART_DATA_ADDR,INT_DATA_LEN);
					GetTime(UsartBuff+UART_DATA_ADDR+INT_DATA_LEN);
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN]=Vtg;
					#if DP_UNLOCK_MSG==DP_UNLOCK_MSG2
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN+1]=Vtg2;
					#else
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN+1]=0;
					#endif
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN+2]=ReadVtgAndDrst();
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN+3]=0;
					UsartBuff[UART_DATA_ADDR+INT_DATA_LEN+TM_LEN+4]=0xff;
					UsartSend(INT_DATA_LEN+TM_LEN+5);
				}

				else
				{
					UsartBuff[UART_CMD_ADDR]=CMD_CMD_ERRO;
					UsartSend(1);
				}

				RxTxFlg = FindRfUser();
				EmptyFlg=FindNb(0, NB_TYPE_ALL);
				break;
			}
		}
		GpioLow(TXD_PORT, TXD_PIN);
		UsartDisable();
		#ifdef EX_USART_EN_PIN
		ExUsartEnble();
		#endif 
		return OK;
	}
	return NOOK;
}